{% schema %}
{
  "name": "Product Carousel",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "Featured Products"
    },
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection",
      "info": "Select a collection to display products from"
    },
    {
      "type": "range",
      "id": "products_to_show",
      "min": 2,
      "max": 12,
      "step": 1,
      "default": 4,
      "label": "Number of products to show"
    },
    {
      "type": "checkbox",
      "id": "show_price",
      "label": "Show product price",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_title",
      "label": "Show product title",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_quick_add",
      "label": "Show quick add button",
      "default": true
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background Color",
      "default": "#FFFFFF"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text Color",
      "default": "#000000"
    }
  ],
  "presets": [
    {
      "name": "Product Carousel",
      "category": "Collection"
    }
  ]
}
{% endschema %}

<div class="product-carousel" style="background-color: {{ section.settings.background_color }};">
  <div class="product-carousel__container">
    {% if section.settings.title != blank %}
      <h2 class="product-carousel__title" style="color: {{ section.settings.text_color }};">{{ section.settings.title }}</h2>
    {% endif %}

    <div class="product-carousel__wrapper">
      <div class="product-carousel__track">
        {% if section.settings.collection != blank %}
          {% for product in collections[section.settings.collection].products limit: section.settings.products_to_show %}
            <div class="product-carousel__item">
              <div class="product-card">
                <a href="{{ product.url }}" class="product-card__link">
                  <div class="product-card__image-wrapper">
                    {% if product.featured_image %}
                      <img 
                        src="{{ product.featured_image | img_url: '400x' }}"
                        alt="{{ product.featured_image.alt | escape }}"
                        class="product-card__image"
                        loading="lazy"
                        width="400"
                        height="400"
                      >
                    {% else %}
                      {{ 'product-1' | placeholder_svg_tag: 'product-card__image placeholder' }}
                    {% endif %}
                  </div>

                  {% if section.settings.show_title %}
                    <h3 class="product-card__title" style="color: {{ section.settings.text_color }};">{{ product.title }}</h3>
                  {% endif %}

                  {% if section.settings.show_price %}
                    <div class="product-card__price" style="color: {{ section.settings.text_color }};">
                      {{ product.price | money }}
                    </div>
                  {% endif %}
                </a>

                {% if section.settings.show_quick_add %}
                  <button 
                    class="product-card__quick-add"
                    data-product-id="{{ product.variants.first.id }}"
                    aria-label="Add {{ product.title }} to cart"
                  >
                    Add to Cart
                  </button>
                {% endif %}
              </div>
            </div>
          {% endfor %}
        {% else %}
          {% for i in (1..section.settings.products_to_show) %}
            <div class="product-carousel__item">
              <div class="product-card">
                <div class="product-card__image-wrapper">
                  {{ 'product-1' | placeholder_svg_tag: 'product-card__image placeholder' }}
                </div>
                <h3 class="product-card__title" style="color: {{ section.settings.text_color }};">Product {{ i }}</h3>
                <div class="product-card__price" style="color: {{ section.settings.text_color }};">$0.00</div>
                <button class="product-card__quick-add">Add to Cart</button>
              </div>
            </div>
          {% endfor %}
        {% endif %}
      </div>
    </div>

    <button class="product-carousel__nav product-carousel__nav--prev" aria-label="Previous slide">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M15 18L9 12L15 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </button>
    <button class="product-carousel__nav product-carousel__nav--next" aria-label="Next slide">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M9 6L15 12L9 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </button>
  </div>
</div>

{% stylesheet %}
.product-carousel {
  padding: 4rem 0;
  position: relative;
  overflow: hidden;
}

.product-carousel__container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 1rem;
  position: relative;
}

.product-carousel__title {
  font-size: 2rem;
  font-weight: 700;
  margin-bottom: 2rem;
  text-align: center;
}

.product-carousel__wrapper {
  overflow: hidden;
  position: relative;
}

.product-carousel__track {
  display: flex;
  gap: 2rem;
  transition: transform 0.5s ease;
}

.product-carousel__item {
  flex: 0 0 calc(25% - 1.5rem);
  min-width: 0;
}

.product-card {
  position: relative;
  background: #FFFFFF;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease;
}

.product-card:hover {
  transform: translateY(-5px);
}

.product-card__link {
  text-decoration: none;
  color: inherit;
}

.product-card__image-wrapper {
  position: relative;
  padding-top: 100%;
  overflow: hidden;
}

.product-card__image {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.3s ease;
}

.product-card:hover .product-card__image {
  transform: scale(1.05);
}

.product-card__title {
  font-size: 1.25rem;
  font-weight: 600;
  margin: 1rem;
  text-align: center;
}

.product-card__price {
  font-size: 1.125rem;
  font-weight: 600;
  margin: 0 1rem;
  text-align: center;
}

.product-card__quick-add {
  width: calc(100% - 2rem);
  margin: 1rem;
  padding: 0.75rem;
  background: #000000;
  color: #FFFFFF;
  border: none;
  border-radius: 4px;
  font-weight: 600;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.product-card__quick-add:hover {
  background: #333333;
}

.product-carousel__nav {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  width: 48px;
  height: 48px;
  border-radius: 50%;
  background: #FFFFFF;
  border: 1px solid #E5E5E5;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.3s ease;
  z-index: 2;
}

.product-carousel__nav:hover {
  background: #F5F5F5;
}

.product-carousel__nav--prev {
  left: -24px;
}

.product-carousel__nav--next {
  right: -24px;
}

.placeholder {
  background: #F5F5F5;
}

@media screen and (max-width: 1024px) {
  .product-carousel__item {
    flex: 0 0 calc(33.333% - 1.33rem);
  }
}

@media screen and (max-width: 768px) {
  .product-carousel__item {
    flex: 0 0 calc(50% - 1rem);
  }

  .product-carousel__title {
    font-size: 1.75rem;
  }
}

@media screen and (max-width: 480px) {
  .product-carousel__item {
    flex: 0 0 100%;
  }

  .product-carousel__nav {
    width: 40px;
    height: 40px;
  }

  .product-carousel__nav--prev {
    left: -20px;
  }

  .product-carousel__nav--next {
    right: -20px;
  }
}
{% endstylesheet %}

{% javascript %}
document.addEventListener('DOMContentLoaded', function() {
  const track = document.querySelector('.product-carousel__track');
  const items = document.querySelectorAll('.product-carousel__item');
  const prevButton = document.querySelector('.product-carousel__nav--prev');
  const nextButton = document.querySelector('.product-carousel__nav--next');
  
  let currentIndex = 0;
  const itemsPerView = window.innerWidth > 1024 ? 4 : window.innerWidth > 768 ? 3 : window.innerWidth > 480 ? 2 : 1;
  const totalSlides = items.length - itemsPerView;

  function updateButtons() {
    prevButton.style.opacity = currentIndex === 0 ? '0.5' : '1';
    nextButton.style.opacity = currentIndex >= totalSlides ? '0.5' : '1';
  }

  function moveCarousel(direction) {
    const itemWidth = items[0].offsetWidth + 32; // 32px is the gap
    const moveAmount = direction * itemWidth;
    
    currentIndex = Math.max(0, Math.min(currentIndex + direction, totalSlides));
    track.style.transform = `translateX(-${currentIndex * itemWidth}px)`;
    updateButtons();
  }

  prevButton.addEventListener('click', () => moveCarousel(-1));
  nextButton.addEventListener('click', () => moveCarousel(1));

  // Handle quick add buttons
  document.querySelectorAll('.product-card__quick-add').forEach(button => {
    button.addEventListener('click', async (e) => {
      e.preventDefault();
      const productId = button.dataset.productId;
      
      try {
        const response = await fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            items: [{
              id: productId,
              quantity: 1
            }]
          })
        });

        if (response.ok) {
          // Update cart count
          const cartCount = document.querySelector('.header__cart-count');
          if (cartCount) {
            const currentCount = parseInt(cartCount.textContent);
            cartCount.textContent = currentCount + 1;
          }
        }
      } catch (error) {
        console.error('Error adding product to cart:', error);
      }
    });
  });

  // Initial button state
  updateButtons();

  // Handle window resize
  let resizeTimeout;
  window.addEventListener('resize', () => {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(() => {
      currentIndex = 0;
      track.style.transform = 'translateX(0)';
      updateButtons();
    }, 250);
  });
});
{% endjavascript %} 